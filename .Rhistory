require(slidify)
publish("cpfaff", "reproducibility")
plot(data = iris, x = Sepal.Width, y = Sepal.Length)
head(iris)
require(ggplot2)
qplot(data = iris, x = "Sepal.Width", y  = "Sepal.Length")
iris
write.csv(iris, "/home/sabsirro/Desktop/iris.csv")
mtcars
write.csv(mtcars, "/home/sabsirro/Desktop/mtcars.csv")
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pkgs, "ramnathv", ref = "dev")
require(rCharts)
n1 <- nPlot(mpg ~ wt, data = mtcars, type = 'scatterChart')
n1
require(slidify)
remove.packages("slidify", "slidifyLibrary")
remove.packages("slidify")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
require(slidify)
publish("cpfaff", "reproducibility")
require(slidify)
publish("cpfaff", "reproducibility")
require(slidify)
require(slidify)
publish("cpfaff", "reproducibility")
publish("cpfaff", "reproducibility")
require(slidify)
publish("cpfaff", "reproducibility")
require(slidify)
publish("cpfaff", "reproducibility")
require(slidify)
publish("cpfaff", "reproducibility")
publish("cpfaff", "reproducibility")
publish("cpfaff", "reproducibility")
publish("cpfaff", "reproducibility")
require(reml)
require(rtematres)
require(rbefdata)
rtematres.api(task=availableTasks)
rtematres.api(task="availableTasks")
```
rtematres.api.do(task="fetchVocabularyData")
require(slidify)
rtematres.api.do(task="fetchVocabularyData")
rtematres.api.do(task="fetchDescription", task="biodiversity")
rtematres.api.define(term="biodiversity")
rtematres.api.define(term="biodiversity")
rtematres.api.define(term="biodiversity")$description
rtematres.api.do(task = "fetchUp", term = "measurement")
rtematres.api.do(task = "fetchDown", term = "measurement")
rtematres.api.do(task="fetchNotes", term="plant organ")
data.frame(dat)
require(reml)
dat = data.set(river = c("SAC",  "SAC",   "AM"),
spp   = c("king",  "king", "ccho"),
stg   = c("smolt", "parr", "smolt"),
ct    = c(293,    410,    210),
col.defs = c("River site used for collection",
"Species common name",
"Life Stage",
"count of live fish in traps"),
unit.defs = list(c(SAC = "The Sacramento River",
AM = "The American River"),
c(king = "King Salmon",
ccho = "Coho Salmon"),
c(parr = "third life stage",
smolt = "fourth life stage"),
"number"))
data.frame(dat)
dat
dat
attributes(dat)
eml_write(dat, file="mydataset.eml")
require(XML)
require(slidify)
eml_publish("EML_example.xml", destination="KNB")
eml_publish("mydataset.eml", destination="KNB")
eml_publish("mydataset.eml", description="Example EML file from EML", categories = "Ecology", tags = "EML", destination="figshare")
require(rfigshare)
eml_publish("mydataset.eml", description="Example EML file from EML", categories = "Ecology", tags = "EML", destination="figshare")
eml_read("http://china.befdata.biow.uni-leipzig.de/datasets/334.eml")
a = eml_read("http://china.befdata.biow.uni-leipzig.de/datasets/334.eml")
obj = eml_read("http://china.befdata.biow.uni-leipzig.de/datasets/334.eml")
dat <- eml_get(obj, "data.set")
eml_config(creator="Claas-Thido Pfaff <claas-thido.pfaff@uni-leipzig.de>")
eml_write(dat, file="mydataset.eml")
eml_write(obj, file="befchina.eml")
obj
obj = eml_read("http://china.befdata.biow.uni-leipzig.de/datasets/334.eml")
eml_get(obj, "contact")
attributes(dat)
attributes(dat)$col.defs
eml_get(obj, "creator")
reuiqre(rbefdata)
require(rbefdata)
bef.portal.get.datasets.for_keyword("plant organ")
dim(datasets)
datasets = bef.portal.get.datasets.for_keyword("plant organ")
dim(datasets)
length(datasets)
width(datasets)
dim(datasets)[2]
dim(datasets)[1]
datasets
datasets$title
narrower_terms = rtematres.api.do(task="fetchDown", term="plant organ")$term
require(rtematres)
narrower_terms = rtematres.api.do(task="fetchDown", term="plant organ")$term
datasets = bef.portal.get.datasets.for_keyword(narrower_terms)
dim(datasets)
as.string(datasets$title)
as.character(datasets$title)
require(slidfy)
require(slidify)
require(slidify)
require(slidify)
